!function(e){var o={};function r(n){if(o[n])return o[n].exports;var t=o[n]={i:n,l:!1,exports:{}};return e[n].call(t.exports,t,t.exports,r),t.l=!0,t.exports}r.m=e,r.c=o,r.d=function(e,o,n){r.o(e,o)||Object.defineProperty(e,o,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,o){if(1&o&&(e=r(e)),8&o)return e;if(4&o&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&o&&"string"!=typeof e)for(var t in e)r.d(n,t,function(o){return e[o]}.bind(null,t));return n},r.n=function(e){var o=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(o,"a",o),o},r.o=function(e,o){return Object.prototype.hasOwnProperty.call(e,o)},r.p="",r(r.s=6)}([function(e,o){e.exports=require("express")},function(e,o){e.exports={secret:"masterSoft2020"}},function(e,o){e.exports=require("mssql")},function(e,o){e.exports=require("bcrypt")},function(e,o){e.exports=require("jsonwebtoken")},function(e,o,r){const n=r(2);var t;t={user:process.env.USERSQL,password:process.env.PASSWORDSQL,database:process.env.DATABASESQL,server:process.env.SERVERSQL,options:{enableArithAbort:!0,encrypt:!1}};var s={abrirConexion:void 0,cerrarConexion:void 0,abrirConexionPOOL:void 0,cerrarConexionPOOL:void 0};const i={};s.abrirConexionPOOL=async e=>{if(!Object.prototype.hasOwnProperty.call(i,e)){const o=new n.ConnectionPool(t),r=o.close.bind(o);return o.close=(...o)=>(delete i[e],r(...o)),await o.connect(),i[e]=o,i[e]}},s.cerrarConexionPOOL=()=>Promise.all(Object.values(i).map(e=>e.close())),e.exports=s},function(e,o,r){const n=r(0),t=r(7);const s=n();s.use(t()),s.use(n.json()),s.use(n.urlencoded({extended:!0})),s.use("/api/logueo",r(8)),s.use("/api/usuarios",r(10)),s.use("/api/autentificasion",r(11)),s.set("port",process.env.PORT||5e3),s.listen(s.get("port"),(e,o)=>{o?console.log(o):console.log("Servidor corriendo en el PUERTO",s.get("port"))})},function(e,o){e.exports=require("cors")},function(e,o,r){const{Router:n}=r(0),t=r(3),{secret:s}=r(1),i=r(4),{token:a}=r(9),u=n();u.post("/",async(e,o)=>{const{abrirConexionPOOL:n,cerrarConexionPOOL:s}=r(5),{usuario:a,pw:u}=e.body,{Request:c,VarChar:p}=r(2);try{const e=new c(await n("logueoUsuario"));e.input("usuario",p,a);const l=await e.execute("pa_login");if(l)if(s(),0===l.rowsAffected[0])o.status(200).json({mensaje:"Usuario inexistente "});else if(t.compareSync(u,l.recordset[0].pw)){const e={nombreUsuario:l.recordset[0].nombreUsuario,apellidoUsuario:l.recordset[0].apellidoUsuario,usuario:l.recordset[0].usuario};i.sign(e,r(1).secret,{expiresIn:14400},(e,r)=>{e?o.status(200).json({mensaje:"Error al generar el token"}):o.status(200).json({token:r})})}else o.status(200).json({mensaje:"Password incorrecta "});else s(),o.status(200).json(l)}catch(e){s(),o.status(403).json({mensaje:e.message})}}),e.exports=u},function(e,o){e.exports=require("morgan")},function(e,o,r){const{Router:n}=r(0),t=r(3),s=n();s.post("/insert",async(e,o)=>{const{abrirConexionPOOL:n,cerrarConexionPOOL:s}=r(5),{nombreUsuario:i,apellidoUsuario:a,usuario:u,pw:c}=e.body;try{const e=await n("insertUsuario"),{Request:p,VarChar:l}=r(2),f=new p(e);f.input("nombreUsuario",l,i),f.input("apellidoUsuario",l,a),f.input("usuario",l,u),f.input("pw",l,t.hashSync(c,10)),await f.execute("pa_insertUsuario")&&(s(),o.status(200).json({mensaje:"Usuario insertado correctamente "}))}catch(e){s(),o.status(403).json({mensaje:e.message})}}),e.exports=s},function(e,o,r){const n=r(0),t=r(4),s=r(1),i=n();i.get("/",(e,o)=>{if(e.headers.authorization){const r=e.headers.authorization.split(" ")[1];t.verify(r,s.secret,(e,r)=>{e?o.status(403).json({mensaje:e.name}):o.status(200).json(r)})}else o.status(403).json({mensaje:"No envio el Token en el headers"})}),e.exports=i}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,